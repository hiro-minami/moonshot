// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

generator erd {
  provider = "prisma-erd-generator"
  theme = "forest"
  output = "ERD.md"
  includeRelationFromFields = true
}

datasource db {
    provider = "postgresql"
    url       = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                     String    @id @default(cuid())
    name                   String?
    email                  String?   @unique
    emailVerified          DateTime?
    image                  String?
    accounts               Account[]
    sessions               Session[]
    createdDreams          Dream[]
    createdNumericalGoals  NumericalGoal[]

    @@map(name: "users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map(name: "verification_tokens")
}

model Dream {
    id              Int      @id @default(autoincrement())
    name            String
    emoji           String?
    createdById     String
    createdBy       User   @relation(fields: [createdById], references: [id])
    startDate       DateTime
    endDate         DateTime
    numericalGoals  NumericalGoal[]

    @@map(name: "dreams")
}

model NumericalGoal {
    id           Int      @id @default(autoincrement())
    name         String
    okrTermId    Int
    dream         Dream @relation(fields: [dreamId], references: [id])
    dreamId       Int
    createdById  String
    createdBy    User   @relation(fields: [createdById], references: [id])
    targetValue  Int
    unit         String
    currentValue Int
    tasks        Task[]

    @@map(name: "numerical_goals")
}

model Task {
    id              Int      @id @default(autoincrement())
    name            String
    numericalGoalId Int
    numericalGoal   NumericalGoal @relation(fields: [numericalGoalId], references: [id])
    isDone          Boolean
    startDate       DateTime
    endDate         DateTime?
    dueDate         DateTime?

    @@map(name: "tasks")
}
