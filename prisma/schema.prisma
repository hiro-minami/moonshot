// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

generator erd {
  provider = "prisma-erd-generator"
  theme = "forest"
  output = "ERD.md"
  includeRelationFromFields = true
}

datasource db {
    provider = "postgresql"
    url       = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    createdOkrTerms OkrTerm[]
    createdObjectives Objective[]
    createdKeyResults KeyResult[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model OkrTerm {
    id          Int      @id @default(autoincrement())
    name        String
    createdById String
    createdBy   User   @relation(fields: [createdById], references: [id])
    startDate   DateTime
    endDate     DateTime
    objectives  Objective[]
    keyResults  KeyResult[]
}

model Objective {
    id          Int      @id @default(autoincrement())
    name        String
    description String
    createdById String
    createdBy   User   @relation(fields: [createdById], references: [id])
    okrTermId   Int
    okrTerm     OkrTerm @relation(fields: [okrTermId], references: [id])
    keyResults  KeyResult[]
}

model KeyResult {
    id           Int      @id @default(autoincrement())
    name         String
    okrTermId    Int
    okrTerm      OkrTerm @relation(fields: [okrTermId], references: [id])
    objectiveId  Int
    objective    Objective @relation(fields: [objectiveId], references: [id])
    createdById  String
    createdBy    User   @relation(fields: [createdById], references: [id])
    targetValue  Int
    unit         String
    currentValue Int
    tasks        Task[]
}

model Task {
    id          Int      @id @default(autoincrement())
    name        String
    keyResultId Int
    keyResult   KeyResult @relation(fields: [keyResultId], references: [id])
    isDone      Boolean
    startDate   DateTime
    endDate     DateTime?
}
